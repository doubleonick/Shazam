precision      = 100;

radial_gap     = 0.25 * 2;
cube_gap       = 0.5;

wall_thickness = 4;
/*************************************************************************************************/
/*************************************************************************************************/
/************************************* <NEW BASE MODULES/> ***************************************/
module cube_peg(length, width, height)
{
    cube(size = [length, width, height], center = true);
}
/*************************************************************************************************/
module radial_peg(radius, height)
{
    cylinder(r = radius, h = height, $fn = precision, center = true);
}
/*************************************************************************************************/
module cube_hole(length, width, height, wall)
{
    difference()
    {
        cube_peg(length + cube_gap + wall, width + cube_gap + wall, height);
        cube_peg(length + cube_gap, width + cube_gap, height);
    }
}
/*************************************************************************************************/
module radial_hole(radius, height, wall)
{
    wall = wall/2;
    difference()
    {
        radial_peg(radius + radial_gap + wall, height);
        radial_peg(radius + radial_gap, height);
    }
}
/*************************************************************************************************/
module cube_lip(length_outer, length_inner, width_outer, width_inner, height)
{
    difference()
    {
        cube(size = [length_outer, width_outer, height], center = true);
        cube(size = [length_inner, width_inner, height], center = true);
    }
}
/*************************************************************************************************/
module cube_lid(length_outer, length_inner, width_outer, width_inner, height)
{
    wall_size = 2;
    difference()
    {
        cube(size = [length_outer + wall_size, width_outer + wall_size, height], center = true);
        cube_lip(length_outer + cube_gap, length_inner - cube_gap, width_outer + cube_gap, width_inner - cube_gap, height);
    }
    translate([0, 0, -height])
    cube(size = [length_outer + wall_size, width_outer + wall_size, height], center = true);
}
/*************************************************************************************************/
module cube_cap(length_outer, width_outer, height, wall)
{
    difference()
    {
        cube_peg(length_outer + wall, width_outer + wall, height + wall);
        translate([0, 0, -wall])
        cube_peg(length_outer + cube_gap, width_outer + cube_gap, height);
    }
}
/*************************************************************************************************/
module radial_lip(radius_outer, radius_inner, height)
{
    difference()
    {
        cylinder(r = radius_outer, h = height, $fn = precision, center = true);
        cylinder(r = radius_inner, h = height, $fn = precision, center = true);
    }
}
/*************************************************************************************************/
module radial_lid(radius_lip_outer, radius_lip_inner, height)
{
    wall_radius = 2;// This is how much material is on the outside of the cap: it has nothing to do with fit.
    difference()
    {
      cylinder(r = radius_lip_outer + wall_radius, h = height, $fn = precision, center = true);
      radial_lip(radius_lip_outer + radial_gap, radius_lip_inner - radial_gap, height);
    }
    translate([0, 0, -height])
    cylinder(r = radius_lip_outer + wall_radius, h = height, $fn = precision, center = true);
}
/*************************************************************************************************/
module radial_cap(radius_peg, height, wall)
{
    difference()
    {
        cylinder(r = radius_peg + wall, h = height + wall, $fn = precision, center = true);
        translate([0, 0, wall/2])
        radial_peg(radius_peg + radial_gap, height);
    }
}
/************************************* </NEW BASE MODULES> *****************************************/
/*********************************** <NEW COMPOSITE MODULES/> **************************************/
/***************************************************************************************************/
link_side             = 107;
link_height           = 25;//43;//25 is height up to seam, which would leave ports exposed
link_vent             = 70;
inner_wall_depth      = 2;
bucky_cube_side       = 5;
bucky_buffer          = 2;
bucky_cylinder_radius = 2;
bucky_cylinder_height = 48;
bucky_plug_depth      = bucky_cube_side + bucky_buffer * 2 + 35;

inner_wall = 4;
chassis_hypotenuse = sqrt(pow(link_side + inner_wall, 2) + pow(link_side + inner_wall, 2))/2;

motor_mount_width     = 25.5;
motor_mount_length    = 19;
motor_mount_depth     = 2.5;
screw_separation      = 12;//12mm apart.  So 6mm each from the center
screw_inset           = 10;//10mm from the outer edge of the mount into the center of the screw hole
screw_bottom_radius   = 2; //2mm for the radius of the bottom of the screw
screw_top_radius      = 4; //4mm radius for the flat head
wire_allowance        = 10;
mount_to_end          = 23.5 + wire_allowance;
motor_mount_thickness = motor_mount_depth * 2;

module screw_hole(){
    rotate([0,90,0])
    translate([(motor_mount_length + mount_to_end)/2 - screw_inset, screw_separation/2,(motor_mount_length + motor_mount_depth)/2])
    cylinder(r1 = screw_bottom_radius, r2 = screw_top_radius, h = motor_mount_depth, $fn = precision, center = true);
}
/***************************************************************************************************/
module motor_mount(){
    outer_x = motor_mount_length + motor_mount_thickness; 
    outer_y = motor_mount_width + motor_mount_thickness;
    inner_x = motor_mount_length + cube_gap; 
    inner_y = motor_mount_width + cube_gap; 
    motor_z = motor_mount_length + mount_to_end;
    
    arc_r   = motor_z * 0.40;
    
    rotate([0, 90, 0])
    //translate([-(motor_mount_width + motor_mount_thickness*2)/2 + (link_height/2 - inner_wall_depth/2), 0, -(motor_mount_length + mount_to_end + 4)/2])
    difference(){
        cube_lip(outer_x, inner_x, outer_y, inner_y, motor_z);
        screw_hole();
        mirror([0,1,0])screw_hole();
        translate([-(motor_mount_length + motor_mount_depth)/2, 0, 0])
        cube_peg(motor_mount_depth, motor_mount_width + cube_gap, motor_mount_length + mount_to_end);
    }
   
    difference(){
        rotate([0, 90, 0])
        translate([outer_x, 0, motor_z * 0.50 - motor_z * 0.30])
        cube_peg(outer_x, outer_y, motor_z * 0.60);
        
        
        rotate([90, 0, 0])
        translate([-arc_r * 0.5, -(outer_x/2 + outer_x * 0.8375), 0])
        union(){
            radial_peg(arc_r, outer_y + cube_gap);
            translate([0, -arc_r * 1, 0])
            cube_peg(arc_r * 2, arc_r * 2, arc_r * 2 );
        }
        
    }
}
/***************************************************************************************************/
/***************************************************************************************************/
/***************************************************************************************************/
//cube_peg(link_side + inner_wall*2, link_side + inner_wall*2, link_height + 20);
difference(){
    translate([0, 0, bucky_cube_side * 2])
    radial_peg(chassis_hypotenuse, bucky_cube_side * 3 + inner_wall);
    translate([0, 0, bucky_cube_side * 2])
    radial_peg(chassis_hypotenuse - (bucky_cube_side * 2 + cube_gap + inner_wall * 2), bucky_cube_side * 3 + inner_wall);
    //translate([0, 0, bucky_cube_side * 2])
    //radial_peg(wire_allowance, bucky_cube_side * 3 + inner_wall);
    
    for(i = [0:11]){
        /*translate([0, 0, (bucky_cube_side * 3 + cube_gap)/2 + inner_wall])
        rotate([0, 0, 30 * i])
        translate([chassis_hypotenuse * 0.66 - bucky_cube_side - inner_wall, 0, 0])
        cube_peg(bucky_cube_side * 2 + cube_gap, bucky_cube_side * 2 + cube_gap, bucky_cube_side * 3 + cube_gap);*/
        
        translate([0, 0, (bucky_cube_side * 3 + cube_gap)/2 + inner_wall])
        rotate([0, 0, 30 * i])
        translate([chassis_hypotenuse - bucky_cube_side - inner_wall, 0, 0])
        cube_peg(bucky_cube_side * 2 + cube_gap, bucky_cube_side * 2 + cube_gap, bucky_cube_side * 3 + cube_gap);
    }
}

difference(){
    translate([0, 0, bucky_cube_side * 2])
    radial_peg(chassis_hypotenuse * 0.66, bucky_cube_side * 3 + inner_wall);
    translate([0, 0, bucky_cube_side * 2])
    radial_peg(chassis_hypotenuse * 0.66 - (bucky_cube_side * 2 + cube_gap + inner_wall * 2), bucky_cube_side * 3 + inner_wall);
    
    for(i = [0:11]){
        translate([0, 0, (bucky_cube_side * 3 + cube_gap)/2 + inner_wall])
        rotate([0, 0, 30 * i])
        translate([chassis_hypotenuse * 0.66 - bucky_cube_side - inner_wall, 0, 0])
        cube_peg(bucky_cube_side * 2 + cube_gap, bucky_cube_side * 2 + cube_gap, bucky_cube_side * 3 + cube_gap);
        
    }
}

for(i = [0:5]){
        translate([0, 0, (bucky_cube_side * 2)])
        rotate([0, 0, 60 * i])
        translate([chassis_hypotenuse * 0.83 - bucky_cube_side - inner_wall, 0, 0])
        cube_peg(bucky_cube_side * 2 + cube_gap, bucky_cube_side * 2 + cube_gap, bucky_cube_side * 3 + inner_wall);
        
    }
